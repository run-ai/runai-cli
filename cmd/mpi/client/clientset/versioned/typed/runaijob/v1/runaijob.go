/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/run-ai/runai-cli/cmd/mpi/api/runaijob/v1"
	"github.com/run-ai/runai-cli/cmd/mpi/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/rest"
)

// RunaiJobsGetter has a method to return a RunaiJobInterface.
// A group's client should implement this interface.
type RunaiJobsGetter interface {
	RunaiJobs(namespace string) RunaiJobInterface
}

// RunaiJobInterface has methods to work with RunaiJob resources.
type RunaiJobInterface interface {
	Create(runaiJob *v1.RunaiJob, opts metav1.CreateOptions) (*v1.RunaiJob, error)
	Update(runaiJob *v1.RunaiJob, opts metav1.UpdateOptions) (*v1.RunaiJob, error)
	UpdateStatus(runaiJob *v1.RunaiJob, opts metav1.UpdateOptions) (*v1.RunaiJob, error)
	Delete(name string, opts metav1.DeleteOptions) error
	DeleteCollection(opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(name string, opts metav1.GetOptions) (*v1.RunaiJob, error)
	List(opts metav1.ListOptions) (*v1.RunaiJobList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.RunaiJob, err error)
	RunaiJobExpansion
}

// runaiJobs implements RunaiJobInterface
type runaiJobs struct {
	client rest.Interface
	ns     string
}

// newRunaiJobs returns a RunaiJobs
func newRunaiJobs(c *RunV1Client, namespace string) *runaiJobs {
	return &runaiJobs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the runaiJob, and returns the corresponding runaiJob object, and an error if there is any.
func (c *runaiJobs) Get(name string, options metav1.GetOptions) (result *v1.RunaiJob, err error) {
	result = &v1.RunaiJob{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("runaijobs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(context.TODO()).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of RunaiJobs that match those selectors.
func (c *runaiJobs) List(opts metav1.ListOptions) (result *v1.RunaiJobList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.RunaiJobList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("runaijobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(context.TODO()).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested runaiJobs.
func (c *runaiJobs) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("runaijobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(context.TODO())
}

// Create takes the representation of a runaiJob and creates it.  Returns the server's representation of the runaiJob, and an error, if there is any.
func (c *runaiJobs) Create(runaiJob *v1.RunaiJob, opts metav1.CreateOptions) (result *v1.RunaiJob, err error) {
	result = &v1.RunaiJob{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("runaijobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(runaiJob).
		Do(context.TODO()).
		Into(result)
	return
}

// Update takes the representation of a runaiJob and updates it. Returns the server's representation of the runaiJob, and an error, if there is any.
func (c *runaiJobs) Update(runaiJob *v1.RunaiJob, opts metav1.UpdateOptions) (result *v1.RunaiJob, err error) {
	result = &v1.RunaiJob{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("runaijobs").
		Name(runaiJob.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(runaiJob).
		Do(context.TODO()).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *runaiJobs) UpdateStatus(runaiJob *v1.RunaiJob, opts metav1.UpdateOptions) (result *v1.RunaiJob, err error) {
	result = &v1.RunaiJob{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("runaijobs").
		Name(runaiJob.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(runaiJob).
		Do(context.TODO()).
		Into(result)
	return
}

// Delete takes name of the runaiJob and deletes it. Returns an error if one occurs.
func (c *runaiJobs) Delete(name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("runaijobs").
		Name(name).
		Body(&opts).
		Do(context.TODO()).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *runaiJobs) DeleteCollection(opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("runaijobs").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(context.TODO()).
		Error()
}

// Patch applies the patch and returns the patched runaiJob.
func (c *runaiJobs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.RunaiJob, err error) {
	result = &v1.RunaiJob{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("runaijobs").
		Name(name).
		SubResource(subresources...).
		Body(data).
		Do(context.TODO()).
		Into(result)
	return
}
